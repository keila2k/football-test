{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/button-toggle.js"],"names":["DragCSSStyleDeclaration","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","DragRefConfig","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","DragRefInternal","DragHelperTemplate","DragRef","_config","_document","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","x","y","_activeTransform","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","event","next","length","targetHandle","handle","target","contains","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","_dropContainer","isDragging","run","_startDragSequence","_previewRect","width","height","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","registerDragItem","_placeholder","handles","forEach","_toggleNativeDragInteractions","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","undefined","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","clear","transform","add","delete","direction","container","position","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","parent","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","appendChild","replaceChild","getPreviewInsertionPoint","start","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","_initialContainer","pointerMove","pointerUp","scroll","pipe","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","startDragging","currentIndex","getItemIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","newContainer","_getSiblingContainerFromPosition","exit","enter","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","getRootNode","elementRect","deepCloneNode","left","top","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","bottom","minX","maxX","right","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","newValue","Point","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","removeChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","rootNode","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","CachedItemPosition","ScrollPosition","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRefInternal","DropListRef","sortingDisabled","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_viewportScrollPosition","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_handleScroll","_updateAfterScroll","scrollTop","scrollLeft","_startScrollInterval","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","registerDropContainer","_removeListeners","removeDropContainer","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","pointerX","pointerY","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","getPlaceholderElement","newPositionReference","getRootElement","parentElement","push","_cacheItemPositions","_reset","items","_withDropContainer","connectedTo","slice","orientation","reverse","findIndex","currentItem","size","pointerDelta","_isPointerNearDropContainer","siblings","isHorizontal","siblingAtNewPosition","clientRect","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","index","isDraggedItem","offset","elementToOffset","adjustClientRect","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","_clientRect","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","getMutableClientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","floor","_cacheOwnPosition","scrollPosition","newTop","newLeft","extraClientRect","topDifference","leftDifference","_sortFromLastPointerPosition","isInsideClientRect","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","isReceiving","getShadowRoot","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","ShadowRoot","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","startsWith","moveEvent","upEvent","set","e","options","config","_clearGlobalListeners","instance","ɵfac","DragDropRegistry_Factory","t","ctorParameters","decorators","args","ɵprov","factory","token","providedIn","DEFAULT_CONFIG","DragDrop","DragDrop_Factory","CdkDragStart","CdkDragRelease","CdkDragEnd","CdkDragEnter","CdkDragExit","CdkDragDrop","CdkDragMove","CdkDragSortEvent","CDK_DRAG_PARENT","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CdkDragHandle_Factory","ɵdir","selectors","hostAttrs","inputs","propDecorators","selector","host","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","data","CdkDragPreview","CdkDragPreview_Factory","CDK_DROP_LIST","CDK_DRAG_CONFIG","CDK_DRAG_CONFIG_FACTORY","CdkDrag","dropContainer","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_destroyed","observer","subscription","_dragRef","movedEvent","createDrag","_dropListRef","_syncInputs","_handleEvents","reset","getFreeDragPosition","onStable","_updateRootElement","changes","childHandleElements","filter","withHandles","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","dispose","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","boundary","ref","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withDirection","emit","markForCheck","CdkDrag_Factory","contentQueries","CdkDrag_ContentQueries","rf","ctx","dirIndex","_t","first","hostVars","hostBindings","CdkDrag_HostBindings","outputs","exportAs","features","provide","useExisting","descendants","providers","currentElement","matches","msMatchesSelector","CdkDropListGroup","_items","CdkDropListGroup_Factory","_uniqueIdCounter","CdkDropListInternal","ɵ0","CdkDropList","_group","id","createDropList","_setupInputSyncSubscription","_dropLists","withItems","reduce","filteredItems","list","withOrientation","CdkDropList_Factory","CdkDropList_ContentQueries","CdkDropList_HostBindings","useValue","DragDropModule","ɵmod","ɵinj","DragDropModule_Factory","ngJitMode","declarations","exports","_c0","_c1","MatButtonToggleDefaultOptions","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","multi","MatButtonToggleGroupMultiple","MatButtonToggleChange","_changeDetector","defaultOptions","_vertical","_multiple","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","appearance","_selectionModel","multiple","select","_buttonToggles","toggle","checked","fn","isDisabled","selected","isUserInput","deferEvents","deselect","_updateModelValue","isSelected","_rawValue","some","_clearSelection","currentValue","_selectValue","correspondingOption","_emitChangeEvent","_markForCheck","_setSelectionByValue","MatButtonToggleGroup_Factory","MatButtonToggleGroup_ContentQueries","MatButtonToggle","MatButtonToggleGroup_HostBindings","vertical","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","_type","_isPrechecked","monitor","group","stopMonitoring","_isSelected","_syncButtonToggle","_buttonElement","focus","newChecked","_appearance","MatButtonToggle_Factory","ɵcmp","viewQuery","MatButtonToggle_Query","MatButtonToggle_HostBindings","MatButtonToggle_focus_HostBindingHandler","$event","disableRipple","ariaLabel","ngContentSelectors","decls","vars","consts","MatButtonToggle_Template","MatButtonToggle_Template_button_click_0_listener","_onButtonClick","_r39","buttonId","directives","styles","encapsulation","changeDetection","String","None","OnPush","MatButtonToggleModule","MatButtonToggleModule_Factory","imports"],"mappings":"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","file":"default~kanban-kanban-module~matches-matches-module-es5.js","sourcesContent":["import { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _supportsShadowDom } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { startWith, takeUntil, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-styling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction DragCSSStyleDeclaration() { }\nif (false) {\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.webkitUserDrag;\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.MozUserSelect;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = (/** @type {?} */ (source[key]));\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/transition-duration.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object that can be used to configure the behavior of DragRef.\n * @record\n */\nfunction DragRefConfig() { }\nif (false) {\n    /**\n     * Minimum amount of pixels that the user should\n     * drag, before the CDK initiates a drag sequence.\n     * @type {?}\n     */\n    DragRefConfig.prototype.dragStartThreshold;\n    /**\n     * Amount the pixels the user should drag before the CDK\n     * considers them to have changed the drag direction.\n     * @type {?}\n     */\n    DragRefConfig.prototype.pointerDirectionChangeThreshold;\n}\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * \\@docs-private\n * @record\n */\nfunction DragRefInternal() { }\n/**\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\n * @record\n * @template T\n */\nfunction DragHelperTemplate() { }\nif (false) {\n    /** @type {?} */\n    DragHelperTemplate.prototype.template;\n    /** @type {?} */\n    DragHelperTemplate.prototype.viewContainer;\n    /** @type {?} */\n    DragHelperTemplate.prototype.context;\n}\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being resized.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const pointerPosition = this._getPointerPositionOnPage(event);\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n            this._hasMoved = true;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\n                .change(10)\n                .subscribe((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(position);\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        if (this._dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const parent = (/** @type {?} */ (element.parentNode));\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            /** @type {?} */\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n        }\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        this._initialContainer = (/** @type {?} */ (this._dropContainer));\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview template, the element won't be visible anyway so we avoid the\n        // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n        this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n            { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        (/** @type {?} */ (this._anchor.parentNode)).replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialContainer.getItemIndex(this),\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewClass = this.previewClass;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            preview.style.transform =\n                getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const elementRect = element.getBoundingClientRect();\n            preview = deepCloneNode(element);\n            preview.style.width = `${elementRect.width}px`;\n            preview.style.height = `${elementRect.height}px`;\n            preview.style.transform = getTransform(elementRect.left, elementRect.top);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach((/**\n                 * @param {?} className\n                 * @return {?}\n                 */\n                className => preview.classList.add(className)));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(event) {\n        /** @type {?} */\n        const point = this._getPointerPositionOnPage(event);\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /**\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\n     * @private\n     * @return {?}\n     */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     * @private\n     * @return {?}\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        /** @type {?} */\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        /** @type {?} */\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        /** @type {?} */\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        /** @type {?} */\n        const topOverflow = boundaryRect.top - elementRect.top;\n        /** @type {?} */\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /**\n     * Gets the drag start delay, based on the event type.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getDragStartDelay(event) {\n        /** @type {?} */\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n}\nif (false) {\n    /**\n     * Element displayed next to the user's pointer while the element is dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._preview;\n    /**\n     * Reference to the view of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRef;\n    /**\n     * Reference to the view of the placeholder element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderRef;\n    /**\n     * Element that is rendered instead of the draggable item while it is being sorted.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholder;\n    /**\n     * Coordinates within the element at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionInElement;\n    /**\n     * Coordinates on the page at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._passiveTransform;\n    /**\n     * CSS `transform` that is applied to the element while it's being dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._activeTransform;\n    /**\n     * Inline `transform` value that the element had before the first dragging sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasStartedDragging;\n    /**\n     * Whether the element has moved since the user started dragging it.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasMoved;\n    /**\n     * Drop container in which the DragRef resided when dragging began.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialContainer;\n    /**\n     * Cached scroll position on the page when the element was picked up.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollPosition;\n    /**\n     * Emits when the item is being moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._moveEvents;\n    /**\n     * Keeps track of the direction in which the user is dragging along each axis.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDirectionDelta;\n    /**\n     * Pointer position at which the last change in the delta occurred.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerPositionAtLastDirectionChange;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElementTapHighlight;\n    /**\n     * Subscription to pointer movement events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMoveSubscription;\n    /**\n     * Subscription to the event that is dispatched when the user lifts their pointer.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUpSubscription;\n    /**\n     * Subscription to the viewport being scrolled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollSubscription;\n    /**\n     * Subscription to the viewport being resized.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._resizeSubscription;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._lastTouchEventTime;\n    /**\n     * Time at which the last dragging sequence was started.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragStartTime;\n    /**\n     * Cached reference to the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryElement;\n    /**\n     * Whether the native dragging interactions have been enabled on the root element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._nativeInteractionsEnabled;\n    /**\n     * Cached dimensions of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRect;\n    /**\n     * Cached dimensions of the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryRect;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderTemplate;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._handles;\n    /**\n     * Registered handles that are currently disabled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabledHandles;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dropContainer;\n    /**\n     * Layout direction of the item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._direction;\n    /**\n     * Axis along which dragging is locked.\n     * @type {?}\n     */\n    DragRef.prototype.lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    DragRef.prototype.dragStartDelay;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    DragRef.prototype.previewClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabled;\n    /**\n     * Emits as the drag sequence is being prepared.\n     * @type {?}\n     */\n    DragRef.prototype.beforeStarted;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    DragRef.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    DragRef.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    DragRef.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    DragRef.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    DragRef.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    DragRef.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    DragRef.prototype.moved;\n    /**\n     * Arbitrary data that can be attached to the drag item.\n     * @type {?}\n     */\n    DragRef.prototype.data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    DragRef.prototype.constrainPosition;\n    /**\n     * Handler for the `mousedown`/`touchstart` events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDown;\n    /**\n     * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMove;\n    /**\n     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUp;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragDropRegistry;\n}\n/**\n * Point on the page or within an element.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param {?} node Node to be removed.\n * @return {?}\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n * @param {?} viewRef\n * @param {?} _document\n * @return {?}\n */\nfunction getRootNode(viewRef, _document) {\n    /** @type {?} */\n    const rootNode = viewRef.rootNodes[0];\n    if (rootNode.nodeType !== _document.ELEMENT_NODE) {\n        /** @type {?} */\n        const wrapper = _document.createElement('div');\n        wrapper.appendChild(rootNode);\n        return wrapper;\n    }\n    return (/** @type {?} */ (rootNode));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drop-list-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Entry in the position cache for draggable items.\n * \\@docs-private\n * @record\n */\nfunction CachedItemPosition() { }\nif (false) {\n    /**\n     * Instance of the drag item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.drag;\n    /**\n     * Dimensions of the item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.clientRect;\n    /**\n     * Amount by which the item has been moved since dragging started.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.offset;\n}\n/**\n * Object holding the scroll position of something.\n * @record\n */\nfunction ScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ScrollPosition.prototype.top;\n    /** @type {?} */\n    ScrollPosition.prototype.left;\n}\n/** @enum {number} */\nconst AutoScrollVerticalDirection = {\n    NONE: 0, UP: 1, DOWN: 2,\n};\n/** @enum {number} */\nconst AutoScrollHorizontalDirection = {\n    NONE: 0, LEFT: 1, RIGHT: 2,\n};\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * \\@docs-private\n * @record\n */\nfunction DropListRefInternal() { }\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the container's scroll position.\n         */\n        this._scrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the scroll position of the viewport.\n         */\n        this._viewportScrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n         */\n        this._cachedShadowRoot = null;\n        /**\n         * Handles the container being scrolled. Has to be an arrow function to preserve the context.\n         */\n        this._handleScroll = (/**\n         * @return {?}\n         */\n        () => {\n            if (!this.isDragging()) {\n                return;\n            }\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            this._updateAfterScroll(this._scrollPosition, element.scrollTop, element.scrollLeft);\n        });\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        this.element = coerceElement(element);\n        this._document = _document;\n        _dragDropRegistry.registerDropContainer(this);\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this.beforeStarted.next();\n        this._isDragging = true;\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._removeListeners();\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => element.addEventListener('scroll', this._handleScroll)));\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n        if (newIndex === -1) {\n            // We use the coordinates of where the item entered the drop\n            // zone to figure out at which index it should be inserted.\n            newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?} distance Distance the user has dragged since the start of the dragging sequence.\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex: previousContainer.getItemIndex(item),\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            (/** @type {?} */ (this))._cacheItems();\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling the container.\n        if (this._isPointerNearDropContainer(pointerX, pointerY)) {\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            [verticalScrollDirection, horizontalScrollDirection] =\n                getElementScrollDirections(element, this._clientRect, pointerX, pointerY);\n            if (verticalScrollDirection || horizontalScrollDirection) {\n                scrollNode = element;\n            }\n        }\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    _cacheOwnPosition() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this._clientRect = getMutableClientRect(element);\n        this._scrollPosition = { top: element.scrollTop, left: element.scrollLeft };\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n                // If the element is being dragged, we have to measure the\n                // placeholder, because the element is hidden.\n                drag.getPlaceholderElement() :\n                drag.getRootElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item.getRootElement().style.transform = ''));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._removeListeners();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    _isPointerNearDropContainer(pointerX, pointerY) {\n        const { top, right, bottom, left, width, height } = this._clientRect;\n        /** @type {?} */\n        const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n        /** @type {?} */\n        const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheOwnPosition();\n    }\n    /**\n     * Updates the internal state of the container after a scroll event has happened.\n     * @private\n     * @param {?} scrollPosition Object that is keeping track of the scroll position.\n     * @param {?} newTop New top scroll position.\n     * @param {?} newLeft New left scroll position.\n     * @param {?=} extraClientRect Extra `ClientRect` object that should be updated, in addition to the\n     *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update\n     *  the `ClientRect` of the list.\n     * @return {?}\n     */\n    _updateAfterScroll(scrollPosition, newTop, newLeft, extraClientRect) {\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        if (extraClientRect) {\n            adjustClientRect(extraClientRect, topDifference, leftDifference);\n        }\n        // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n        // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n        // behavior where we might be measuring the element before its position has changed.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        }));\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n    }\n    /**\n     * Removes the event listeners associated with this drop list.\n     * @private\n     * @return {?}\n     */\n    _removeListeners() {\n        coerceElement(this.element).removeEventListener('scroll', this._handleScroll);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._getShadowRoot().elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheOwnPosition();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     * @private\n     * @return {?}\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.isDragging()) {\n                /** @type {?} */\n                const newPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n                this._updateAfterScroll(this._viewportScrollPosition, newPosition.top, newPosition.left, this._clientRect);\n            }\n            else if (this.isReceiving()) {\n                this._cacheOwnPosition();\n            }\n        }));\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     * @private\n     * @return {?}\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            this._cachedShadowRoot = getShadowRoot(coerceElement(this.element)) || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\nif (false) {\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    DropListRef.prototype.element;\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.disabled;\n    /**\n     * Whether sorting items within the list is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.sortingDisabled;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    DropListRef.prototype.lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.autoScrollDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    DropListRef.prototype.enterPredicate;\n    /**\n     * Emits right before dragging has started.\n     * @type {?}\n     */\n    DropListRef.prototype.beforeStarted;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    DropListRef.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    DropListRef.prototype.exited;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    DropListRef.prototype.dropped;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    DropListRef.prototype.sorted;\n    /**\n     * Arbitrary data that can be attached to the drop list.\n     * @type {?}\n     */\n    DropListRef.prototype.data;\n    /**\n     * Whether an item in the list is being dragged.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._isDragging;\n    /**\n     * Cache of the dimensions of all the items inside the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._itemPositions;\n    /**\n     * Keeps track of the container's scroll position.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollPosition;\n    /**\n     * Keeps track of the scroll position of the viewport.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollPosition;\n    /**\n     * Cached `ClientRect` of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._clientRect;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * from `_draggables`, as well as any items that have been dragged in, but haven't\n     * been dropped yet.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeDraggables;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as\n     * well as what direction the pointer was moving in when the swap occured.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._previousSwap;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._draggables;\n    /**\n     * Drop lists that are connected to the current one.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._siblings;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._orientation;\n    /**\n     * Connected siblings that currently have a dragged item.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeSiblings;\n    /**\n     * Layout direction of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._direction;\n    /**\n     * Subscription to the window being scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollSubscription;\n    /**\n     * Vertical direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._verticalScrollDirection;\n    /**\n     * Horizontal direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._horizontalScrollDirection;\n    /**\n     * Node that is being auto-scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollNode;\n    /**\n     * Used to signal to the current auto-scroll sequence when to stop.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._stopScrollTimers;\n    /**\n     * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._cachedShadowRoot;\n    /**\n     * Reference to the document.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._document;\n    /**\n     * Handles the container being scrolled. Has to be an arrow function to preserve the context.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._handleScroll;\n    /**\n     * Starts the interval that'll auto-scroll the element.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._startScrollInterval;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._dragDropRegistry;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportRuler;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param {?} element Element for which we should calculate the scroll direction.\n * @param {?} clientRect Bounding client rectangle of the element.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    /** @type {?} */\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    /** @type {?} */\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    /** @type {?} */\n    let verticalScrollDirection = 0 /* NONE */;\n    /** @type {?} */\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        /** @type {?} */\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        /** @type {?} */\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n/**\n * Gets the shadow root of an element, if any.\n * @param {?} element\n * @return {?}\n */\nfunction getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        /** @type {?} */\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        if (rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e)),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._document;\n    /**\n     * Registered drop container instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dropInstances;\n    /**\n     * Registered drag item instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dragInstances;\n    /**\n     * Drag item instances that are currently being dragged.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._activeDragInstances;\n    /**\n     * Keeps track of the event listeners that we've bound to the `document`.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._globalListeners;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerMove;\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerUp;\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.scroll;\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * \\@param event Event whose default action should be prevented.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._preventDefaultWhileDragging;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._dragDropRegistry;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-events.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Event emitted when the user starts dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragStart() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragStart.prototype.source;\n}\n/**\n * Event emitted when the user releases an item, before any animations have started.\n * @record\n * @template T\n */\nfunction CdkDragRelease() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragRelease.prototype.source;\n}\n/**\n * Event emitted when the user stops dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragEnd() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.source;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.distance;\n}\n/**\n * Event emitted when the user moves an item into a new drop container.\n * @record\n * @template T, I\n */\nfunction CdkDragEnter() { }\nif (false) {\n    /**\n     * Container into which the user has moved the item.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.container;\n    /**\n     * Item that was moved into the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.item;\n    /**\n     * Index at which the item has entered the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.currentIndex;\n}\n/**\n * Event emitted when the user removes an item from a\n * drop container by moving it into another one.\n * @record\n * @template T, I\n */\nfunction CdkDragExit() { }\nif (false) {\n    /**\n     * Container from which the user has a removed an item.\n     * @type {?}\n     */\n    CdkDragExit.prototype.container;\n    /**\n     * Item that was removed from the container.\n     * @type {?}\n     */\n    CdkDragExit.prototype.item;\n}\n/**\n * Event emitted when the user drops a draggable item inside a drop container.\n * @record\n * @template T, O\n */\nfunction CdkDragDrop() { }\nif (false) {\n    /**\n     * Index of the item when it was picked up.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousIndex;\n    /**\n     * Current index of the item.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.currentIndex;\n    /**\n     * Item that is being dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.item;\n    /**\n     * Container in which the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.container;\n    /**\n     * Container from which the item was picked up. Can be the same as the `container`.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousContainer;\n    /**\n     * Whether the user's pointer was over the container when the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.isPointerOverContainer;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.distance;\n}\n/**\n * Event emitted as the user is dragging a draggable item.\n * @record\n * @template T\n */\nfunction CdkDragMove() { }\nif (false) {\n    /**\n     * Item that is being dragged.\n     * @type {?}\n     */\n    CdkDragMove.prototype.source;\n    /**\n     * Position of the user's pointer on the page.\n     * @type {?}\n     */\n    CdkDragMove.prototype.pointerPosition;\n    /**\n     * Native event that is causing the dragging.\n     * @type {?}\n     */\n    CdkDragMove.prototype.event;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragMove.prototype.distance;\n    /**\n     * Indicates the direction in which the user is dragging the element along each axis.\n     * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\n     * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\n     * that the position hasn't changed.\n     * @type {?}\n     */\n    CdkDragMove.prototype.delta;\n}\n/**\n * Event emitted when the user swaps the position of two drag items.\n * @record\n * @template T, I\n */\nfunction CdkDragSortEvent() { }\nif (false) {\n    /**\n     * Index from which the item was sorted previously.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.previousIndex;\n    /**\n     * Index that the item is currently in.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.currentIndex;\n    /**\n     * Container that the item belongs to.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.container;\n    /**\n     * Item that is being sorted.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.item;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-parent.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-handle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 8)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] } });\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDragHandle.ngAcceptInputType_disabled;\n    /**\n     * Closest parent draggable instance.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._parentDrag;\n    /**\n     * Emits when the state of the handle has changed.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._stateChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragHandle.prototype._disabled;\n    /** @type {?} */\n    CdkDragHandle.prototype.element;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-placeholder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" } });\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Context data to be added to the placeholder template instance.\n     * @type {?}\n     */\n    CdkDragPlaceholder.prototype.data;\n    /** @type {?} */\n    CdkDragPlaceholder.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-preview.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { data: \"data\" } });\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Context data to be added to the preview template instance.\n     * @type {?}\n     */\n    CdkDragPreview.prototype.data;\n    /** @type {?} */\n    CdkDragPreview.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Injection token that can be used to configure the behavior of `CdkDrag`.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG', {\n    providedIn: 'root',\n    factory: CDK_DRAG_CONFIG_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, config);\n        this._dragRef.data = this;\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return (/** @type {?} */ (merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => {\n                    return item._stateChanges.pipe(startWith(item));\n                })))));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const dragStartDelay = this.dragStartDelay;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPreview, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragHandle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], disabled: [\"cdkDragDisabled\", \"disabled\"], data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CdkDragHandle, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPreview]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPlaceholder]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDrag.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._destroyed;\n    /**\n     * Reference to the underlying drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype._dragRef;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     */\n    CdkDrag.prototype._handles;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     */\n    CdkDrag.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     */\n    CdkDrag.prototype._placeholderTemplate;\n    /**\n     * Arbitrary data to attach to this drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype.data;\n    /**\n     * Locks the position of the dragged element along the specified axis.\n     * @type {?}\n     */\n    CdkDrag.prototype.lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     * @type {?}\n     */\n    CdkDrag.prototype.rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     * @type {?}\n     */\n    CdkDrag.prototype.boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    CdkDrag.prototype.dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     * @type {?}\n     */\n    CdkDrag.prototype.freeDragPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    CdkDrag.prototype.constrainPosition;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    CdkDrag.prototype.previewClass;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    CdkDrag.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    CdkDrag.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    CdkDrag.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    CdkDrag.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    CdkDrag.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    CdkDrag.prototype.moved;\n    /**\n     * Element that the draggable is attached to.\n     * @type {?}\n     */\n    CdkDrag.prototype.element;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._changeDetectorRef;\n}\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup'\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDropListGroup.ngAcceptInputType_disabled;\n    /**\n     * Drop lists registered inside the group.\n     * @type {?}\n     */\n    CdkDropListGroup.prototype._items;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropListGroup.prototype._disabled;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * \\@docs-private\n * @record\n */\nfunction CdkDropListInternal() { }\nconst ɵ0 = undefined;\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this.orientation = 'vertical';\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        this._disabled = false;\n        /**\n         * Whether sorting within this drop list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._draggables.changes\n            .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} items\n         * @return {?}\n         */\n        (items) => {\n            this._dropListRef.withItems(items.reduce((/**\n             * @param {?} filteredItems\n             * @param {?} drag\n             * @return {?}\n             */\n            (filteredItems, drag) => {\n                if (drag.dropContainer === this) {\n                    filteredItems.push(drag._dragRef);\n                }\n                return filteredItems;\n            }), (/** @type {?} */ ([]))));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CdkDropListGroup, 12)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], contentQueries: function CdkDropList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDrag, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._draggables = _t);\n    } }, hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], data: [\"cdkDropListData\", \"data\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CdkDropListGroup, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] }\n];\nCdkDropList.propDecorators = {\n    _draggables: [{ type: ContentChildren, args: [CdkDrag, { descendants: true },] }],\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], id: [{\n            type: Input\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], _draggables: [{\n            type: ContentChildren,\n            args: [CdkDrag, { descendants: true }]\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }] }); })();\nif (false) {\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     * @type {?}\n     * @private\n     */\n    CdkDropList._dropLists;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_sortingDisabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_autoScrollDisabled;\n    /**\n     * Emits when the list has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._destroyed;\n    /**\n     * Reference to the underlying drop list instance.\n     * @type {?}\n     */\n    CdkDropList.prototype._dropListRef;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     */\n    CdkDropList.prototype._draggables;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     * @type {?}\n     */\n    CdkDropList.prototype.connectedTo;\n    /**\n     * Arbitrary data to attach to this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.data;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     */\n    CdkDropList.prototype.orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     * @type {?}\n     */\n    CdkDropList.prototype.id;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    CdkDropList.prototype.lockAxis;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._disabled;\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @type {?}\n     */\n    CdkDropList.prototype.sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    CdkDropList.prototype.enterPredicate;\n    /**\n     * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n     * @type {?}\n     */\n    CdkDropList.prototype.autoScrollDisabled;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    CdkDropList.prototype.dropped;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    CdkDropList.prototype.exited;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    CdkDropList.prototype.sorted;\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    CdkDropList.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._group;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder], exports: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_CONFIG_FACTORY, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n\n//# sourceMappingURL=drag-drop.js.map","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/button-toggle/button-toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nfunction MatButtonToggleDefaultOptions() { }\nif (false) {\n    /** @type {?|undefined} */\n    MatButtonToggleDefaultOptions.prototype.appearance;\n}\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatButtonToggleGroup)),\n    multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatButtonToggleGroupMultiple {\n}\n/** @type {?} */\nlet _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nclass MatButtonToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * The MatButtonToggle that emits the event.\n     * @type {?}\n     */\n    MatButtonToggleChange.prototype.source;\n    /**\n     * The value assigned to the MatButtonToggle.\n     * @type {?}\n     */\n    MatButtonToggleChange.prototype.value;\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nclass MatButtonToggleGroup {\n    /**\n     * @param {?} _changeDetector\n     * @param {?=} defaultOptions\n     */\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Event emitted when the group's value changes.\n         */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * `name` attribute for the underlying `input` element.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            }));\n        }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n    get value() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle.value));\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n    get selected() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple button toggle group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle._markForCheck()));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked)));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const selected = this.selected;\n        /** @type {?} */\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        /** @type {?} */\n        const event = new MatButtonToggleChange((/** @type {?} */ (source)), this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @param {?=} deferEvents Whether to defer emitting the change events.\n     * @return {?}\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            ((/** @type {?} */ (this.selected))).checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve((/**\n             * @return {?}\n             */\n            () => this._updateModelValue(isUserInput)));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => toggle.value != null && value === toggle.value));\n        }\n        return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            (currentValue) => this._selectValue(currentValue)));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /**\n     * Clears the selected toggles.\n     * @private\n     * @return {?}\n     */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked = false));\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this._buttonToggles.find((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => {\n            return toggle.value != null && toggle.value === value;\n        }));\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /**\n     * Syncs up the group's value with the model and emits the change event.\n     * @private\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n        ])] });\n/** @nocollapse */\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatButtonToggle)), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(( /**\n                             * @return {?}\n                             */() => MatButtonToggle)), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatButtonToggleGroup.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatButtonToggleGroup.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatButtonToggleGroup.ngAcceptInputType_vertical;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._vertical;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._selectionModel;\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._rawValue;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._onTouched;\n    /**\n     * Child button toggle buttons.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._buttonToggles;\n    /**\n     * The appearance for all the buttons in the group.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype.appearance;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._name;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype.valueChange;\n    /**\n     * Event emitted when the group's value changes.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype.change;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._changeDetector;\n}\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/**\n * \\@docs-private\n */\nclass MatButtonToggleBase {\n}\n/** @type {?} */\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     * @param {?} defaultTabIndex\n     * @param {?=} defaultOptions\n     */\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \n    // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n    defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /**\n         * Event emitted when the group value changes.\n         */\n        this.change = new EventEmitter();\n        /** @type {?} */\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * Unique ID for the underlying `button` element.\n     * @return {?}\n     */\n    get buttonId() { return `${this.id}-button`; }\n    /**\n     * The appearance style of the button.\n     * @return {?}\n     */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n        this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = this.buttonToggleGroup.name;\n        }\n        if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n            this.checked = true;\n        }\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /**\n     * Focuses the button.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n    _onButtonClick() {\n        /** @type {?} */\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [1, \"mat-button-toggle\"], hostVars: 11, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler($event) { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener($event) { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"div\", 3);\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n    } if (rf & 2) {\n        const _r39 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? 0 - 1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r39)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <div class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</button>\\n\\n<div class=\\\"mat-button-toggle-focus-overlay\\\"></div>\\n<div class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n                    // but can still receive focus from things like cdkFocusInitial.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_checked;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_vertical;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._isSingleSelector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._checked;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n     * take precedence so this may be omitted.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.ariaLabel;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     * @type {?}\n     */\n    MatButtonToggle.prototype.ariaLabelledby;\n    /**\n     * Type of the button toggle. Either 'radio' or 'checkbox'.\n     * @type {?}\n     */\n    MatButtonToggle.prototype._type;\n    /** @type {?} */\n    MatButtonToggle.prototype._buttonElement;\n    /**\n     * The parent button toggle group (exclusive selection). Optional.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.buttonToggleGroup;\n    /**\n     * The unique ID for this button toggle.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.id;\n    /**\n     * HTML's 'name' attribute used to group radios for unique selection.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.name;\n    /**\n     * MatButtonToggleGroup reads this to assign its own value.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.value;\n    /**\n     * Tabindex for the toggle.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.tabIndex;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._appearance;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._disabled;\n    /**\n     * Event emitted when the group value changes.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.change;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._focusMonitor;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/button-toggle/button-toggle-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); }, imports: [[MatCommonModule, MatRippleModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup,\n        MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule,\n        MatButtonToggleGroup,\n        MatButtonToggle]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/button-toggle/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map"]}