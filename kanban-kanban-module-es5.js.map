{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js","webpack:///src/app/kanban/board.service.ts","webpack:///src/app/kanban/board/board.component.ts","webpack:///src/app/kanban/board/board.component.html","webpack:///src/app/kanban/boards-list/boards-list.component.ts","webpack:///src/app/kanban/boards-list/boards-list.component.html","webpack:///src/app/kanban/dialogs/board-dialog.component.ts","webpack:///src/app/kanban/dialogs/task-dialog.component.ts","webpack:///src/app/kanban/kanban-routing.module.ts","webpack:///src/app/kanban/kanban.module.ts"],"names":["MatDialogContainer_ng_template_0_Template","rf","ctx","DialogPosition","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","throwMatDialogContentAlreadyAttachedError","Error","MatDialogContainer","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","attachDomPortal","portal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","_ariaLabelledBy","attachComponentPortal","attachTemplatePortal","element","nativeElement","_focusTrap","create","focusInitialElementWhenReady","activeElement","contains","focus","toFocus","body","destroy","Promise","resolve","then","event","toState","_trapFocus","_restoreFocus","emit","markForCheck","ɵfac","MatDialogContainer_Factory","t","ɵcmp","type","selectors","viewQuery","MatDialogContainer_Query","_t","first","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","_onAnimationStart","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","_onAnimationDone","_id","features","decls","vars","consts","template","MatDialogContainer_Template","directives","styles","encapsulation","animation","ctorParameters","undefined","decorators","args","propDecorators","static","selector","None","changeDetection","Default","animations","host","uniqueId","MatDialogState","OPEN","CLOSING","CLOSED","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","pipe","phaseName","subscribe","next","complete","clearTimeout","_closeFallbackTimeout","dispose","detachments","_result","componentInstance","keydownEvents","keyCode","preventDefault","close","dialogResult","detachBackdrop","setTimeout","totalTime","_startExitAnimation","asObservable","backdropClick","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updatePosition","classes","addPanelClass","removePanelClass","getConfig","positionStrategy","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatDialog","_overlay","_injector","_location","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_afterAllClosed","_scrollStrategy","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","afterClosed","_removeOpenDialog","afterOpened","_closeDialogs","find","dialog","overlayConfig","_getOverlayConfig","dialogConfig","state","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","WeakMap","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","updateSize","injectionTokens","get","set","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","getAttribute","dialogs","parent","MatDialog_Factory","ɵprov","token","factory","defaultOptions","Object","assign","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","changes","proxiedChange","currentValue","MatDialogClose_Factory","ɵdir","MatDialogClose_HostBindings","MatDialogClose_click_HostBindingHandler","inputs","_matDialogClose","exportAs","MatDialogTitle","_dialogRef","container","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","classList","MatDialogModule","ɵmod","ɵinj","MatDialogModule_Factory","providers","imports","ngJitMode","declarations","exports","entryComponents","BoardService","afAuth","db","auth","currentUser","user","collection","add","uid","tasks","description","label","authState","ref","where","orderBy","valueChanges","idField","boards","batch","refs","map","b","doc","idx","update","priority","commit","boardId","delete","task","FieldValue","arrayRemove","providedIn","BoardComponent","boardService","board","previousIndex","currentIndex","updateTasks","newTask","open","isNew","result","deleteBoard","taskDrop","openDialog","handleDelete","templateUrl","styleUrls","BoardsListComponent","sub","getUserBoards","sortBoards","createBoard","title","unsubscribe","drop","openBoardDialog","BoardDialogComponent","onNoClick","TaskDialogComponent","labelOptions","removeTask","routes","path","component","KanbanRoutingModule","forChild","KanbanModule"],"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","file":"kanban-kanban-module-es5.js","sourcesContent":["import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalInjector, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, InjectionToken, TemplateRef, Injectable, Injector, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Possible overrides for a dialog's position.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nfunction DialogPosition() { }\nif (false) {\n    /**\n     * Override for the dialog's top position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.top;\n    /**\n     * Override for the dialog's bottom position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.bottom;\n    /**\n     * Override for the dialog's left position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.left;\n    /**\n     * Override for the dialog's right position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.right;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nclass MatDialogConfig {\n    constructor() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * Custom class for the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the dialog has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Custom class for the backdrop.\n         */\n        this.backdropClass = '';\n        /**\n         * Whether the user can use escape or clicking on the backdrop to close the modal.\n         */\n        this.disableClose = false;\n        /**\n         * Width of the dialog.\n         */\n        this.width = '';\n        /**\n         * Height of the dialog.\n         */\n        this.height = '';\n        /**\n         * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n         */\n        this.maxWidth = '80vw';\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * ID of the element that describes the dialog.\n         */\n        this.ariaDescribedBy = null;\n        /**\n         * ID of the element that labels the dialog.\n         */\n        this.ariaLabelledBy = null;\n        /**\n         * Aria label to assign to the dialog element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Whether the dialog should focus the first focusable element on open.\n         */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\nif (false) {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.viewContainerRef;\n    /**\n     * ID for the dialog. If omitted, a unique one will be generated.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.id;\n    /**\n     * The ARIA role of the dialog element.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.role;\n    /**\n     * Custom class for the overlay pane.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.panelClass;\n    /**\n     * Whether the dialog has a backdrop.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.hasBackdrop;\n    /**\n     * Custom class for the backdrop.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.backdropClass;\n    /**\n     * Whether the user can use escape or clicking on the backdrop to close the modal.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.disableClose;\n    /**\n     * Width of the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.width;\n    /**\n     * Height of the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.height;\n    /**\n     * Min-width of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.minWidth;\n    /**\n     * Min-height of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.minHeight;\n    /**\n     * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.maxWidth;\n    /**\n     * Max-height of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.maxHeight;\n    /**\n     * Position overrides.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.position;\n    /**\n     * Data being injected into the child component.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.data;\n    /**\n     * Layout direction for the dialog's content.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.direction;\n    /**\n     * ID of the element that describes the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaDescribedBy;\n    /**\n     * ID of the element that labels the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaLabelledBy;\n    /**\n     * Aria label to assign to the dialog element.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaLabel;\n    /**\n     * Whether the dialog should focus the first focusable element on open.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.autoFocus;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.restoreFocus;\n    /**\n     * Scroll strategy to be used for the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.scrollStrategy;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     * @type {?}\n     */\n    MatDialogConfig.prototype.closeOnNavigation;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.componentFactoryResolver;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by MatDialog.\n * \\@docs-private\n * @type {?}\n */\nconst matDialogAnimations = {\n    /**\n     * Animation that is applied on the dialog container by defalt.\n     */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-container.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     * @param {?} _config\n     */\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * State of the dialog animation.\n         */\n        this._state = 'enter';\n        /**\n         * Emits when an animation state changes.\n         */\n        this._animationStateChanged = new EventEmitter();\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * \\@breaking-change 10.0.0\n         */\n        this.attachDomPortal = (/**\n         * @param {?} portal\n         * @return {?}\n         */\n        (portal) => {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachDomPortal(portal);\n        });\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @private\n     * @return {?}\n     */\n    _trapFocus() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(element);\n        }\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else {\n            /** @type {?} */\n            const activeElement = this._document.activeElement;\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            if (activeElement !== element && !element.contains(activeElement)) {\n                element.focus();\n            }\n        }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        /** @type {?} */\n        const toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            /** @type {?} */\n            const activeElement = this._document.activeElement;\n            /** @type {?} */\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                toFocus.focus();\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @private\n     * @return {?}\n     */\n    _savePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = (/** @type {?} */ (this._document.activeElement));\n            // Note that there is no focus method when rendering on the server.\n            if (this._elementRef.nativeElement.focus) {\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                // opening multiple dialogs at the same time. Needs to be async, because the element\n                // may not be focusable immediately.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._elementRef.nativeElement.focus()));\n            }\n        }\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig)); };\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], viewQuery: function MatDialogContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n/** @nocollapse */\nMatDialogContainer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig }\n];\nMatDialogContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._document;\n    /**\n     * The portal outlet inside of this container into which the dialog content will be loaded.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._portalOutlet;\n    /**\n     * The class that traps and manages focus within the dialog.\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._focusTrap;\n    /**\n     * Element that was focused before the dialog was opened. Save this to restore upon close.\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n    /**\n     * State of the dialog animation.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._state;\n    /**\n     * Emits when an animation state changes.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._animationStateChanged;\n    /**\n     * ID of the element that should be considered as the dialog's label.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._ariaLabelledBy;\n    /**\n     * ID for the container DOM element.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._id;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * \\@param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatDialogContainer.prototype.attachDomPortal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._focusTrapFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._changeDetectorRef;\n    /**\n     * The dialog configuration.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n/** @type {?} */\nlet uniqueId = 0;\n/** @enum {number} */\nconst MatDialogState = {\n    OPEN: 0, CLOSING: 1, CLOSED: 2,\n};\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     * @param {?=} id\n     */\n    constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /**\n         * Whether the user is allowed to close the dialog.\n         */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /**\n         * Subject for notifying the user that the dialog has finished opening.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has started closing.\n         */\n        this._beforeClosed = new Subject();\n        /**\n         * Current state of the dialog.\n         */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'enter')), take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }));\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'exit')), take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._overlayRef.dispose();\n        }));\n        _overlayRef.detachments().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = (/** @type {?} */ (null));\n            this._overlayRef.dispose();\n        }));\n        _overlayRef.keydownEvents()\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.preventDefault();\n            this.close();\n        }));\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'start')), take(1))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._state = 2 /* CLOSED */;\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._overlayRef.dispose();\n            }), event.totalTime + 100);\n        }));\n        this._containerInstance._startExitAnimation();\n        this._state = 1 /* CLOSING */;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n    beforeClosed() {\n        return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} position New dialog position.\n     * @return {THIS}\n     */\n    updatePosition(position) {\n        /** @type {?} */\n        let strategy = (/** @type {?} */ (this))._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {THIS}\n     */\n    updateSize(width = '', height = '') {\n        (/** @type {?} */ (this))._getPositionStrategy().width(width).height(height);\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    addPanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.addPanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    removePanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.removePanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the current state of the dialog's lifecycle.\n     * @return {?}\n     */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @private\n     * @return {?}\n     */\n    _getPositionStrategy() {\n        return (/** @type {?} */ (this._overlayRef.getConfig().positionStrategy));\n    }\n}\nif (false) {\n    /**\n     * The instance of component opened into the dialog.\n     * @type {?}\n     */\n    MatDialogRef.prototype.componentInstance;\n    /**\n     * Whether the user is allowed to close the dialog.\n     * @type {?}\n     */\n    MatDialogRef.prototype.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._afterOpened;\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._afterClosed;\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._beforeClosed;\n    /**\n     * Result to be passed to afterClosed.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._result;\n    /**\n     * Handle to the timeout that's running as a fallback in case the exit animation doesn't fire.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._closeFallbackTimeout;\n    /**\n     * Current state of the dialog.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._state;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._overlayRef;\n    /** @type {?} */\n    MatDialogRef.prototype._containerInstance;\n    /** @type {?} */\n    MatDialogRef.prototype.id;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @type {?}\n */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @type {?}\n */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _defaultOptions\n     * @param {?} scrollStrategy\n     * @param {?} _parentDialog\n     * @param {?} _overlayContainer\n     */\n    constructor(_overlay, _injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => this.openDialogs.length ?\n            this._afterAllClosed :\n            this._afterAllClosed.pipe(startWith(undefined))))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Keeps track of the currently-open dialogs.\n     * @return {?}\n     */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * @return {?}\n     */\n    get _afterAllClosed() {\n        /** @type {?} */\n        const parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        /** @type {?} */\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe((/**\n         * @return {?}\n         */\n        () => this._removeOpenDialog(dialogRef)));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n    getDialogById(id) {\n        return this.openDialogs.find((/**\n         * @param {?} dialog\n         * @return {?}\n         */\n        dialog => dialog.id === id));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @private\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @private\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        /** @type {?} */\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @private\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatDialogConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n        /** @type {?} */\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @private\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        /** @type {?} */\n        const dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n        // When the dialog backdrop is clicked, we want to close it.\n        if (config.hasBackdrop) {\n            overlayRef.backdropClick().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (!dialogRef.disableClose) {\n                    dialogRef.close();\n                }\n            }));\n        }\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, (/** @type {?} */ (null)), (/** @type {?} */ ({ $implicit: config.data, dialogRef }))));\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            /** @type {?} */\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @private\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n        // added to the injection tokens.\n        /** @type {?} */\n        const injectionTokens = new WeakMap([\n            [MatDialogContainer, dialogContainer],\n            [MAT_DIALOG_DATA, config.data],\n            [MatDialogRef, dialogRef]\n        ]);\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            injectionTokens.set(Directionality, {\n                value: config.direction,\n                change: of()\n            });\n        }\n        return new PortalInjector(userInjector || this._injector, injectionTokens);\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @private\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    _removeOpenDialog(dialogRef) {\n        /** @type {?} */\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((/**\n                 * @param {?} previousValue\n                 * @param {?} element\n                 * @return {?}\n                 */\n                (previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                }));\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @private\n     * @return {?}\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        /** @type {?} */\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            /** @type {?} */\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                /** @type {?} */\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @private\n     * @param {?} dialogs\n     * @return {?}\n     */\n    _closeDialogs(dialogs) {\n        /** @type {?} */\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\n/** @nocollapse */\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._openDialogsAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._afterAllClosedAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._afterOpenedAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._ariaHiddenElements;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._scrollStrategy;\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     * @type {?}\n     */\n    MatDialog.prototype.afterAllClosed;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._defaultOptions;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._parentDialog;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._overlayContainer;\n}\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-content-directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique IDs for dialog elements.\n * @type {?}\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    /**\n     * @param {?} dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /**\n         * Default to \"button\" to prevents accidental form submits.\n         */\n        this.type = 'button';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) { return ctx.dialogRef.close(ctx.dialogResult); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': 'dialogRef.close(dialogResult)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\nif (false) {\n    /**\n     * Screenreader label for the button.\n     * @type {?}\n     */\n    MatDialogClose.prototype.ariaLabel;\n    /**\n     * Default to \"button\" to prevents accidental form submits.\n     * @type {?}\n     */\n    MatDialogClose.prototype.type;\n    /**\n     * Dialog close input.\n     * @type {?}\n     */\n    MatDialogClose.prototype.dialogResult;\n    /** @type {?} */\n    MatDialogClose.prototype._matDialogClose;\n    /** @type {?} */\n    MatDialogClose.prototype.dialogRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogClose.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogClose.prototype._dialog;\n}\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    /**\n     * @param {?} _dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(_dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            }));\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\n/** @nocollapse */\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatDialogTitle.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._dialogRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._dialog;\n}\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n    /** @type {?} */\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find((/**\n     * @param {?} dialog\n     * @return {?}\n     */\n    dialog => dialog.id === (/** @type {?} */ (parent)).id)) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); }, providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            CommonModule,\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n//# sourceMappingURL=dialog.js.map","import { Injectable } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\nimport * as firebase from 'firebase/app';\r\nimport { switchMap, map } from 'rxjs/operators';\r\nimport { Board, Task } from './board.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BoardService {\r\n  constructor(private afAuth: AngularFireAuth, private db: AngularFirestore) {}\r\n\r\n  /**\r\n   * Creates a new board for the current user\r\n   */\r\n  async createBoard(data: Board) {\r\n    const user = await this.afAuth.auth.currentUser;\r\n    return this.db.collection('boards').add({\r\n      ...data,\r\n      uid: user.uid,\r\n      tasks: [{ description: 'Hello!', label: 'yellow' }]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get all boards owned by current user\r\n   */\r\n  getUserBoards() {\r\n    return this.afAuth.authState.pipe(\r\n      switchMap(user => {\r\n        if (user) {\r\n          return this.db\r\n            .collection<Board>('boards', ref =>\r\n              ref.where('uid', '==', user.uid).orderBy('priority')\r\n            )\r\n            .valueChanges({ idField: 'id' });\r\n        } else {\r\n          return [];\r\n        }\r\n      }),\r\n      // map(boards => boards.sort((a, b) => a.priority - b.priority))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Run a batch write to change the priority of each board for sorting\r\n   */\r\n  sortBoards(boards: Board[]) {\r\n    const db = firebase.firestore();\r\n    const batch = db.batch();\r\n    const refs = boards.map(b => db.collection('boards').doc(b.id));\r\n    refs.forEach((ref, idx) => batch.update(ref, { priority: idx }));\r\n    batch.commit();\r\n  }\r\n\r\n  /**\r\n   * Delete board\r\n   */\r\n  deleteBoard(boardId: string) {\r\n    return this.db\r\n      .collection('boards')\r\n      .doc(boardId)\r\n      .delete();\r\n  }\r\n\r\n  /**\r\n   * Updates the tasks on board\r\n   */\r\n  updateTasks(boardId: string, tasks: Task[]) {\r\n    return this.db\r\n      .collection('boards')\r\n      .doc(boardId)\r\n      .update({ tasks });\r\n  }\r\n\r\n  /**\r\n   * Remove a specifc task from the board\r\n   */\r\n  removeTask(boardId: string, task: Task) {\r\n    return this.db\r\n      .collection('boards')\r\n      .doc(boardId)\r\n      .update({\r\n        tasks: firebase.firestore.FieldValue.arrayRemove(task)\r\n      });\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { TaskDialogComponent } from '../dialogs/task-dialog.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BoardService } from '../board.service';\r\nimport { Task } from '../board.model';\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.scss']\r\n})\r\nexport class BoardComponent {\r\n  @Input() board;\r\n\r\n  taskDrop(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.board.tasks, event.previousIndex, event.currentIndex);\r\n    this.boardService.updateTasks(this.board.id, this.board.tasks);\r\n  }\r\n\r\n  openDialog(task?: Task, idx?: number): void {\r\n    const newTask = { label: 'purple' };\r\n    const dialogRef = this.dialog.open(TaskDialogComponent, {\r\n      width: '500px',\r\n      data: task\r\n        ? { task: { ...task }, isNew: false, boardId: this.board.id, idx }\r\n        : { task: newTask, isNew: true }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        if (result.isNew) {\r\n          this.boardService.updateTasks(this.board.id, [\r\n            ...this.board.tasks,\r\n            result.task\r\n          ]);\r\n        } else {\r\n          const update = this.board.tasks;\r\n          update.splice(result.idx, 1, result.task);\r\n          this.boardService.updateTasks(this.board.id, this.board.tasks);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleDelete() {\r\n    this.boardService.deleteBoard(this.board.id);\r\n  }\r\n\r\n  constructor(private boardService: BoardService, private dialog: MatDialog) {}\r\n}\r\n","<mat-card class=\"outer-card\">\r\n  <mat-card-header>\r\n    <!-- Slot for the handle -->\r\n    <ng-content></ng-content>\r\n    <mat-card-title>\r\n      {{ board.title }}\r\n    </mat-card-title>\r\n    <mat-card-subtitle>\r\n      {{ board.id }}\r\n    </mat-card-subtitle>\r\n  </mat-card-header>\r\n\r\n  <div\r\n    class=\"tasks\"\r\n    cdkDropList\r\n    cdkDropListOrientation=\"vertical\"\r\n    (cdkDropListDropped)=\"taskDrop($event)\"\r\n  >\r\n    <div\r\n      class=\"inner-card\"\r\n      cdkDrag\r\n      *ngFor=\"let task of board.tasks; let i = index\"\r\n      (click)=\"openDialog(task, i)\"\r\n    >\r\n      <mat-card [ngClass]=\"task.label\"> {{ task.description }} </mat-card>\r\n    </div>\r\n\r\n    <button mat-stroked-button (click)=\"openDialog()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n\r\n    <app-delete-button (delete)=\"handleDelete()\"></app-delete-button>\r\n  </div>\r\n</mat-card>\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Subscription } from 'rxjs';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BoardDialogComponent } from '../dialogs/board-dialog.component';\r\nimport { Board } from '../board.model';\r\nimport { BoardService } from '../board.service';\r\n\r\n@Component({\r\n  selector: 'app-boards-list',\r\n  templateUrl: './boards-list.component.html',\r\n  styleUrls: ['./boards-list.component.scss']\r\n})\r\nexport class BoardsListComponent implements OnInit, OnDestroy {\r\n\r\n  boards: Board[];\r\n  sub: Subscription;\r\n\r\n  constructor(public boardService: BoardService, public dialog: MatDialog) {}\r\n\r\n  ngOnInit() {\r\n    this.sub = this.boardService\r\n      .getUserBoards()\r\n      .subscribe(boards => (this.boards = boards));\r\n  }\r\n\r\n  drop(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.boards, event.previousIndex, event.currentIndex);\r\n    this.boardService.sortBoards(this.boards);\r\n  }\r\n\r\n  openBoardDialog(): void {\r\n    const dialogRef = this.dialog.open(BoardDialogComponent, {\r\n      width: '400px',\r\n      data: {  }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.boardService.createBoard({\r\n          title: result,\r\n          priority: this.boards.length\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n}\r\n","<div\r\n  cdkDropList\r\n  cdkDropListOrientation=\"horizontal\"\r\n  class=\"boards\"\r\n  (cdkDropListDropped)=\"drop($event)\"\r\n>\r\n  <app-board cdkDrag *ngFor=\"let board of boards\" [board]=\"board\">\r\n    <mat-icon cdkDragHandle class=\"handle\">drag_indicator</mat-icon>\r\n  </app-board>\r\n\r\n  <div class=\"board-button\">\r\n    <button\r\n      mat-raised-button\r\n      color=\"accent\"\r\n      cdkDragDisabled\r\n      (click)=\"openBoardDialog()\"\r\n    >\r\n      New Board\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-board-dialog',\r\n  template: `\r\n    <h1 mat-dialog-title>Board</h1>\r\n    <div mat-dialog-content>\r\n    <p>What shall we call this board?</p>\r\n      <mat-form-field>\r\n        <input placeholder=\"title\" matInput [(ngModel)]=\"data.title\" />\r\n      </mat-form-field>\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <button mat-button (click)=\"onNoClick()\">Cancel</button>\r\n      <button mat-button [mat-dialog-close]=\"data.title\" cdkFocusInitial>\r\n        Create\r\n      </button>\r\n    </div>\r\n  `\r\n})\r\nexport class BoardDialogComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<BoardDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { BoardService } from '../board.service';\r\n\r\n@Component({\r\n  selector: 'app-task-dialog',\r\n  styleUrls: ['./dialog.scss'],\r\n  template: `\r\n    <h1 mat-dialog-title>Task</h1>\r\n    <div mat-dialog-content class=\"content\">\r\n      <mat-form-field>\r\n        <textarea\r\n          placeholder=\"Task description\"\r\n          matInput\r\n          [(ngModel)]=\"data.task.description\"\r\n        ></textarea>\r\n      </mat-form-field>\r\n      <br />\r\n      <mat-button-toggle-group\r\n        #group=\"matButtonToggleGroup\"\r\n        [(ngModel)]=\"data.task.label\"\r\n      >\r\n        <mat-button-toggle *ngFor=\"let opt of labelOptions\" [value]=\"opt\">\r\n          <mat-icon [ngClass]=\"opt\">{{\r\n            opt === 'gray' ? 'check_circle' : 'lens'\r\n          }}</mat-icon>\r\n        </mat-button-toggle>\r\n      </mat-button-toggle-group>\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <button mat-button [mat-dialog-close]=\"data\" cdkFocusInitial>\r\n        {{ data.isNew ? 'Add Task' : 'Update Task' }}\r\n      </button>\r\n\r\n      <app-delete-button\r\n        (delete)=\"handleTaskDelete()\"\r\n        *ngIf=\"!data.isNew\"\r\n      ></app-delete-button>\r\n    </div>\r\n  `\r\n})\r\nexport class TaskDialogComponent {\r\n  labelOptions = ['purple', 'blue', 'green', 'yellow', 'red', 'gray'];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<TaskDialogComponent>,\r\n    private boardService: BoardService,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  handleTaskDelete() {\r\n    this.boardService.removeTask(this.data.boardId, this.data.task);\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { BoardsListComponent } from './boards-list/boards-list.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: BoardsListComponent }\r\n];\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class KanbanRoutingModule { }\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { KanbanRoutingModule } from './kanban-routing.module';\r\nimport { BoardsListComponent } from './boards-list/boards-list.component';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { BoardComponent } from './board/board.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BoardDialogComponent } from './dialogs/board-dialog.component';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { TaskDialogComponent } from './dialogs/task-dialog.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BoardsListComponent,\r\n    BoardComponent,\r\n    BoardDialogComponent,\r\n    TaskDialogComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    SharedModule,\r\n    KanbanRoutingModule,\r\n    FormsModule,\r\n    DragDropModule,\r\n    MatDialogModule,\r\n    MatButtonToggleModule,\r\n  ],\r\n  entryComponents: [BoardDialogComponent, TaskDialogComponent]\r\n})\r\nexport class KanbanModule {}\r\n"]}